axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
plot.title = element_text(face = "bold"),
plot.caption = element_text(face = "bold.italic")
)
pct_sales_by_state_tbl <- order_lines_tbl %>%
select(customer_state, main_category_name, sub_category_name, price) %>%
filter(main_category_name == "fashion" | main_category_name == "moveis") %>%
group_by(customer_state, main_category_name, sub_category_name) %>%
summarise(total_revenue = sum(price)) %>%
ungroup() %>%
group_by(customer_state) %>%
mutate(pct = round((total_revenue / sum(total_revenue)), digits = 2)) %>%
ungroup() %>%
mutate(customer_state = as.factor(customer_state) %>% fct_rev()) %>%
mutate(customer_state_num = as.numeric(customer_state))
# Data Visualization
pct_sales_by_state_tbl %>%
ggplot(aes(sub_category_name, customer_state)) +
# Geometries
geom_tile(aes(fill = pct)) +
geom_text(aes(label = scales::percent(pct)),
size = 3) +
facet_wrap(~ main_category_name, scales = "free_x") +
# Formatting
scale_fill_gradient(low = "white", high = palette_light()[1]) +
labs(
title = "Heatmap of Purchasing Habits",
x = "Bike Type (Category 2)",
y = "Customer",
caption = str_glue(
"Customers that prefer Road:
Ann Arbor Speed, Austin Cruisers, & Indianapolis Velocipedes
Customers that prefer Mountain:
Ithaca Mountain Climbers, Pittsburgh Mountain Machines, & Tampa 29ers")
) +
theme_tq() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
plot.title = element_text(face = "bold"),
plot.caption = element_text(face = "bold.italic")
)
install.packages("maps")
install.packages("sf")
library(sf)
ggplot() +
geom_sf(data=states, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE)
states <- read_state(year=2014)
install.packages("geobr")
library(geobr)
states <- read_state(year=2014)
ggplot() +
geom_sf(data=states, fill="#2D3E50", color="#FEBF57", size=.15, show.legend = FALSE)
pct_sales_by_state_tbl %>%
ggplot(aes(sub_category_name, customer_state)) +
# Geometries
geom_tile(aes(fill = pct)) +
geom_text(aes(label = scales::percent(pct)),
size = 3) +
facet_wrap(~ main_category_name, scales = "free_x") +
# Formatting
scale_fill_gradient(low = "white", high = palette_light()[1]) +
labs(
title = "Heatmap of Purchasing Habits",
x = "Bike Type (Category 2)",
y = "Customer",
caption = str_glue(
"Customers that prefer Road:
Ann Arbor Speed, Austin Cruisers, & Indianapolis Velocipedes
Customers that prefer Mountain:
Ithaca Mountain Climbers, Pittsburgh Mountain Machines, & Tampa 29ers")
) +
theme_tq() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
plot.title = element_text(face = "bold"),
plot.caption = element_text(face = "bold.italic")
)
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Apply your data transformation skills!
# Output: sp_500_daily_returns_tbl
setwd("~/Downloads/week_6_data")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# install.packages("plotly")
library(tidyverse)
library(tidyquant)
library(broom)
library(umap)
# GET ALL STOCKS IN A STOCK INDEX (E.G. SP500)
sp_500_index_tbl <- tq_index("SP500")
sp_500_index_tbl
# PULL IN STOCK PRICES FOR EACH STOCK IN THE INDEX
sp_500_prices_tbl <- sp_500_index %>%
select(symbol) %>%
tq_get(get = "stock.prices")
# PULL IN STOCK PRICES FOR EACH STOCK IN THE INDEX
sp_500_prices_tbl <- sp_500_index_tbl %>%
select(symbol) %>%
tq_get(get = "stock.prices")
# STOCK PRICES
sp_500_prices_tbl <- read_rds("session_6_data/sp_500_prices_tbl.rds")
sp_500_prices_tbl
# SECTOR INFORMATION
sp_500_index_tbl <- read_rds("session_6_data/sp_500_index_tbl.rds")
sp_500_index_tbl
sp_500_prices_tbl %>% glimpse()
setwd("~/startupengineer")
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
# Helper packages
library(readr)       # for importing data
library(broom.mixed) # for converting bayesian models to tidy tibbles
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
lm_mod <-
linear_reg() %>%
set_engine("lm")
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
tidy(lm_fit)
new_points <- expand.grid(initial_volume = 20,
food_regime = c("Initial", "Low", "High"))
mean_pred <- predict(lm_fit, new_data = new_points)
conf_int_pred <- predict(lm_fit,
new_data = new_points,
type = "conf_int")
# Now combine:
plot_data <-
new_points %>%
bind_cols(mean_pred) %>%
bind_cols(conf_int_pred)
# and plot:
ggplot(plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
labs(y = "urchin size")
# BAYES -------------------------------------------------------------------
# set the prior distribution
prior_dist <- rstanarm::student_t(df = 1)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
print(bayes_fit, digits = 5)
tidy(bayes_fit, conf.int = TRUE)
tidy(bayes_fit)
bayes_fit
bayes_fit %>% tidy()
bayes_fit
prior_dist
bayes_mod
urchins
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
bayes_fit
bayes_fit
bayes_fit$fit
library(rstanarm)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
bayes_mod
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
bayes_fit
bayes_mod
prior_dist
# BAYES -------------------------------------------------------------------
# set the prior distribution
prior_dist <- rstanarm::student_t(df = 1)
prior_dist
?student_t
bayes_mod
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)  %>%
set_mode(mode = "regression")
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
bayes_fit
bayes_mod
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
bayes_fit
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)  %>%
set_mode(mode = "regression")
bayes_mod
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
bayes_fit
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
lm_mod <-
linear_reg() %>%
set_engine("lm")
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
new_points <- expand.grid(initial_volume = 20,
food_regime = c("Initial", "Low", "High"))
new_points
mean_pred <- predict(lm_fit, new_data = new_points)
mean_pred
conf_int_pred <- predict(lm_fit,
new_data = new_points,
type = "conf_int")
conf_int_pred
# Now combine:
plot_data <-
new_points %>%
bind_cols(mean_pred) %>%
bind_cols(conf_int_pred)
# and plot:
ggplot(plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
labs(y = "urchin size")
prior_dist <- rstanarm::student_t(df = 1)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
print(bayes_fit, digits = 5)
print(bayes_fit, digits = 5)
bayes_fit
print(bayes_fit, digits = 5)
print(bayes_fit, digits = 5)
View(bayes_fit)
?tidy
bayes_fit %>% parsnip::tidy()
bayes_fit %>% parsnip::tidy(intervals = T)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(tibble.print_min = 5)
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
# Helper packages
library(readr)       # for importing data
library(broom.mixed) # for converting bayesian models to tidy tibbles
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
options(tibble.print_min = 5)
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
# Helper packages
library(readr)       # for importing data
library(broom.mixed) # for converting bayesian models to tidy tibbles
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
urchins
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg() %>%
set_engine("lm")
lm_mod <-
linear_reg() %>%
set_engine("lm")
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
new_points <- expand.grid(initial_volume = 20,
food_regime = c("Initial", "Low", "High"))
new_points
mean_pred <- predict(lm_fit, new_data = new_points)
mean_pred
conf_int_pred <- predict(lm_fit,
new_data = new_points,
type = "conf_int")
conf_int_pred
# Now combine:
plot_data <-
new_points %>%
bind_cols(mean_pred) %>%
bind_cols(conf_int_pred)
# and plot:
ggplot(plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
labs(y = "urchin size")
# set the prior distribution
prior_dist <- rstanarm::student_t(df = 1)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
print(bayes_fit, digits = 5)
tidy(bayes_fit, intervals = TRUE)
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
ggplot(bayes_plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(y = "urchin size") +
ggtitle("Bayesian model with t(1) prior distribution")
library(broom.mixed) # for converting bayesian models to tidy tibbles
prior_dist <- rstanarm::student_t(df = 1)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
print(bayes_fit, digits = 5)
tidy(bayes_fit, conf.int = TRUE)
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
ggplot(bayes_plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(y = "urchin size") +
ggtitle("Bayesian model with t(1) prior distribution")
p3 <- ggplot(bayes_plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(y = "urchin size") +
ggtitle("Bayesian model with t(1) prior distribution")+
theme(
panel.background      = element_rect(fill = "transparent"), # bg of the panel
plot.background       = element_rect(fill = "transparent", color = NA), # bg of the plot
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white"),
plot.caption = element_text(color = "white"),
legend.background     = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent", color = "white"), # get rid of legend panel bg
legend.text           = element_text(color = "white") ,
legend.title          = element_text(color = "white") ,
legend.key = element_blank(),
panel.grid.major      = element_line(size = 0.5,  linetype = 'solid', colour = "grey"),
panel.grid.minor      = element_line(size = 0.25, linetype = 'solid', colour = "grey"),
axis.ticks            = element_line(color = "grey", size = 1),
axis.text             = element_text(color  = "white"),
axis.line             = element_line(colour = "grey",  size = 1),
axis.title            = element_text(color  = "white", face = "bold", size = 15) # adding a black line for x and y axis
)
p3
p3 <- ggplot(bayes_plot_data, aes(x = food_regime)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2,size  = 2,color = "#2dc6d6") ) +
geom_point(aes(y = .pred), size = 5, color = "#2dc6d6") +
labs(y = "urchin size") +
ggtitle("Bayesian model with t(1) prior distribution")+
theme(
p3 <- ggplot(bayes_plot_data, aes(x = food_regime)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2,size  = 2,color = "#2dc6d6") ) +
geom_point(aes(y = .pred), size = 5, color = "#2dc6d6") +
labs(y = "urchin size") +
ggtitle("Bayesian model with t(1) prior distribution")+
theme(
panel.background      = element_rect(fill = "transparent"), # bg of the panel
plot.background       = element_rect(fill = "transparent", color = NA), # bg of the plot
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white"),
plot.caption = element_text(color = "white"),
legend.background     = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent", color = "white"), # get rid of legend panel bg
legend.text           = element_text(color = "white") ,
legend.title          = element_text(color = "white") ,
legend.key = element_blank(),
panel.grid.major      = element_line(size = 0.5,  linetype = 'solid', colour = "grey"),
panel.grid.minor      = element_line(size = 0.25, linetype = 'solid', colour = "grey"),
axis.ticks            = element_line(color = "grey", size = 1),
axis.text             = element_text(color  = "white"),
axis.line             = element_line(colour = "grey",  size = 1),
axis.title            = element_text(color  = "white", face = "bold", size = 15) # adding a black line for x and y axis
)
p3 <- ggplot(bayes_plot_data, aes(x = food_regime)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2, size  = 2, color = "#2dc6d6")  +
geom_point(aes(y = .pred), size = 5, color = "#2dc6d6") +
labs(y = "urchin size") +
ggtitle("Bayesian model with t(1) prior distribution")+
theme(
panel.background      = element_rect(fill = "transparent"), # bg of the panel
plot.background       = element_rect(fill = "transparent", color = NA), # bg of the plot
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white"),
plot.caption = element_text(color = "white"),
legend.background     = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent", color = "white"), # get rid of legend panel bg
legend.text           = element_text(color = "white") ,
legend.title          = element_text(color = "white") ,
legend.key = element_blank(),
panel.grid.major      = element_line(size = 0.5,  linetype = 'solid', colour = "grey"),
panel.grid.minor      = element_line(size = 0.25, linetype = 'solid', colour = "grey"),
axis.ticks            = element_line(color = "grey", size = 1),
axis.text             = element_text(color  = "white"),
axis.line             = element_line(colour = "grey",  size = 1),
axis.title            = element_text(color  = "white", face = "bold", size = 15) # adding a black line for x and y axis
)
p3
ggsave(p3, filename = "error_bars_bayes.png",  bg = "transparent", width = 10, height = 7.5)
setwd("~/Downloads")
pngfile <- pdftools::pdf_convert('regression_cheatsheet.pdf', dpi = 600)
install.packages("pdftools")
?pdf_convert
?pdftools::pdf_convert
pngfile <- pdftools::pdf_convert('regression_cheatsheet.pdf', page = 2, dpi = 600)
pngfile
install.packages("tesseract")
text <- tesseract::ocr(pngfile)
text
cat(text)
