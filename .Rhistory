)
ggsave(p3, filename = "static/img/courses/dat_sci/08/model07.png",  bg = "transparent", width = 10, height = 7.5)
bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro))
bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "blue")
bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "blue") +
chord_flip()
bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "blue") +
coord_flip()
bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "blue") +
coord_flip() +
facet_wrap(~ frame_material)
bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "blue") +
coord_flip() +
facet_wrap(~ frame_material) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(
title = "Unit Price for Each Model",
y = "", x = "Category 2"
)
bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2dc6d6") +
coord_flip() +
facet_wrap(~ frame_material) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(
title = "Unit Price for Each Model",
y = "", x = "Category 2"
)
train_tbl
glimpse() %>% train_tbl
train_tbl %>% glimpse()
cat(names(train_tbl))
cat(names(train_tbl),sep = "\n")
bike_features_tbl %>% distinct(category_2)
bike_features_tbl %>% filter(category_2 "Cross-Country")
bike_features_tbl %>% filter(category_2 == "Cross-Country")
bike_features_tbl %>% filter(category_2 == "Cross-Country") %>% select(model)
new_cross_country <- tibble(
model = "Exceed AL SL new",
category_2 = "Cross-Country",
frame_material = "aluminium",
shimano_dura_ace = 0,
shimano_ultegra = 0,
shimano_105 = 0,
shimano_tiagra = 0,
Shimano_sora = 0,
shimano_deore = 0,
shimano_slx = 0,
shimano_grx = 0,
Shimano_xt = 0,
Shimano_xtr = 0,
Shimano_saint = 0,
SRAM_red = 0,
SRAM_force = 0,
SRAM_rival = 0,
SRAM_apex = 0,
SRAM_xx1 = 0,
SRAM_x01 = 0,
SRAM_gx = 0,
SRAM_nx = 0,
SRAM_sx = 0,
Campagnolo_potenza = 0,
Campagnolo_super_record = 0,
shimano_nexus = 0,
shimano_alfine = 0
)
new_cross_country
predict(model_03_linear_glmnet, new_data = new_cross_country)
train_tbl
model_03_linear_glmnet <- linear_reg(mode = "regression", penalty = 10, mixture = 0.1) %>%
set_engine("glmnet") %>%
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight))
predict(model_03_linear_glmnet, new_data = new_cross_country)
predict(model_07_boost_tree_xgboost, new_data = new_cross_country)
models_tbl <- tibble(
model_id = str_c("Model 0", 1:7),
model = list(
model_01_linear_lm_simple,
model_02_linear_lm_complex,
model_03_linear_glmnet,
model_04_tree_decision_tree,
model_05_rand_forest_ranger,
model_06_rand_forest_randomForest,
model_07_boost_tree_xgboost
)
)
models_tbl
models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country)) %>%
unnest(predictions) %>%
mutate(category_2 = "Cross-Country") %>%
left_join(new_cross_country, by = "category_2")
models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country))
models_tbl
model
model_03_linear_glmnet <- linear_reg(mode = "regression", penalty = 10, mixture = 0.1) %>%
set_engine("glmnet") %>%
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight))
model_02_linear_lm_complex <- linear_reg("regression") %>%
set_engine("lm") %>%
# This is going to be different
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight))
model_01_linear_lm_simple <- linear_reg(mode = "regression") %>%
set_engine("lm") %>%
fit(price_euro ~ category_2 + frame_material, data = train_tbl)
models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country))
model_04_tree_decision_tree <- decision_tree(mode = "regression",
# Set the values accordingly to get started
cost_complexity = 0.001,
tree_depth      = 5,
min_n           = 7) %>%
set_engine("rpart") %>%
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight))
set.seed(1234)
model_05_rand_forest_ranger <- rand_forest(
mode = "regression", mtry = 8, trees = 5000, min_n = 10
) %>%
# Run ?ranger::ranger to play around with many arguments
# We need to set importance to impurity to be able to explain the model in the next step
set_engine("ranger", replace = TRUE, splitrule = "extratrees", importance = "impurity") %>%
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight))
model_06_rand_forest_randomForest <- rand_forest("regression") %>%
set_engine("randomForest") %>%
# All character variables have to be changed to factor variables
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight) %>% mutate_if(is.character, as_factor))
model_07_boost_tree_xgboost <- boost_tree(
mode = "regression",
mtry = 30,
learn_rate = 0.25,
tree_depth = 7
) %>%
set_engine("xgboost") %>%
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight))
models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country))
rlang::last_error()
rlang::last_trace()
models_tbl %>%
mutate(predictions = map(model[1], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[1:2], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[2], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[3], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[3:7], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[2], predict, new_data = new_cross_country))
train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight)
model_02_linear_lm_complex <- linear_reg("regression") %>%
set_engine("lm") %>%
# This is going to be different
fit(price_euro ~ ., data = train_tbl %>% select(-c(id:category_1), -c(category_3:gender), -weight))
```r
# Iteration
models_tbl <- tibble(
model_id = str_c("Model 0", 1:7),
model = list(
model_01_linear_lm_simple,
model_02_linear_lm_complex,
model_03_linear_glmnet,
model_04_tree_decision_tree,
model_05_rand_forest_ranger,
model_06_rand_forest_randomForest,
model_07_boost_tree_xgboost
)
)
models_tbl %>%
mutate(predictions = map(model[2], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[3], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[4], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[5], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[6], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model[7], predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country))
models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country)) %>%
unnest(predictions) %>%
mutate(category_2 = "Cross-Country") %>%
left_join(new_cross_country, by = "category_2")
bike_features_tbl %>% filter(category_2 "Cross-Country")
bike_features_tbl %>% filter(category_2 == "Cross-Country")
bike_features_tbl %>% filter(category_2 == "Cross-Country") %>% glimpse()
new_cross_country <- tibble(
model = "Exceed AL SL new",
category_2 = "Cross-Country",
frame_material = "aluminium",
shimano_dura_ace = 0,
shimano_ultegra = 0,
shimano_105 = 0,
shimano_tiagra = 0,
Shimano_sora = 0,
shimano_deore = 0,
shimano_slx = 0,
shimano_grx = 0,
Shimano_xt = 1,
Shimano_xtr = 0,
Shimano_saint = 0,
SRAM_red = 0,
SRAM_force = 0,
SRAM_rival = 0,
SRAM_apex = 0,
SRAM_xx1 = 0,
SRAM_x01 = 0,
SRAM_gx = 0,
SRAM_nx = 0,
SRAM_sx = 0,
Campagnolo_potenza = 0,
Campagnolo_super_record = 0,
shimano_nexus = 0,
shimano_alfine = 0
)
new_cross_country
predict(model_03_linear_glmnet, new_data = new_cross_country)
predict(model_07_boost_tree_xgboost, new_data = new_cross_country)
models_tbl <- tibble(
model_id = str_c("Model 0", 1:7),
model = list(
model_01_linear_lm_simple,
model_02_linear_lm_complex,
model_03_linear_glmnet,
model_04_tree_decision_tree,
model_05_rand_forest_ranger,
model_06_rand_forest_randomForest,
model_07_boost_tree_xgboost
)
)
models_tbl
models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country)) %>%
unnest(predictions) %>%
mutate(category_2 = "Cross-Country") %>%
left_join(new_cross_country, by = "category_2")
g1 <- bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2dc6d6") +
coord_flip() +
facet_wrap(~ frame_material) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(
title = "Unit Price for Each Model",
y = "", x = "Category 2"
)
g1
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_over_mountain_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 3,
data = predictions_new_over_mountain_tbl)
predictions_new_cross_country_tbl <- models_tbl %>%
mutate(predictions = map(model, predict, new_data = new_cross_country)) %>%
unnest(predictions) %>%
mutate(category_2 = "Cross-Country") %>%
left_join(new_cross_country, by = "category_2")
predictions_new_over_mountain_tbl
predictions_new_cross_country_tbl
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_over_mountain_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 3,
data = predictions_new_over_mountain_tbl)
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 3,
data = predictions_new_cross_country_tbl)
g2
g1 <- bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2dc6d6") +
coord_flip() +
facet_wrap(~ frame_material) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(
title = "Unit Price for Each Model",
y = "", x = "Category 2"
) +
theme(
line = element_line(color = "red"),
panel.background      = element_rect(fill = "transparent"), # bg of the panel
plot.background       = element_rect(fill = "transparent", color = NA), # bg of the plot
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white"),
plot.caption = element_text(color = "white"),
legend.background     = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent", color = "white"), # get rid of legend panel bg
legend.text           = element_text(color = "white") ,
legend.title          = element_text(color = "white") ,
legend.key = element_blank(),
panel.grid.major      = element_line(size = 0.5,  linetype = 'solid', colour = "grey"),
panel.grid.minor      = element_line(size = 0.25, linetype = 'solid', colour = "grey"),
axis.ticks            = element_line(color = "grey", size = 1),
axis.text             = element_text(color  = "white"),
axis.line             = element_line(colour = "grey",  size = 1),
axis.title            = element_text(color  = "white", face = "bold", size = 18), # adding a black line for x and y axis
strip.background = element_rect(fill="#2dc6d6"),
strip.text = element_text(colour = "white", face = "bold")
)
g1
ggsave(g1, filename = "static/img/courses/dat_sci/08/price_facet.png",  bg = "transparent", width = 10, height = 7.5)
ggsave(g1, filename = "static/img/courses/dat_sci/08/price_facet.png",  bg = "transparent", width = 10, height = 12.5)
g1 <- bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin() +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2dc6d6") +
coord_flip() +
facet_wrap(~ frame_material) +
scale_y_continuous(labels = scales::dollar_format(suffix = " €", prefix = "")) +
labs(
title = "Unit Price for Each Model",
y = "", x = "Category 2"
) +
theme(
line = element_line(color = "red"),
panel.background      = element_rect(fill = "transparent"), # bg of the panel
plot.background       = element_rect(fill = "transparent", color = NA), # bg of the plot
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white"),
plot.caption = element_text(color = "white"),
legend.background     = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent", color = "white"), # get rid of legend panel bg
legend.text           = element_text(color = "white") ,
legend.title          = element_text(color = "white") ,
legend.key = element_blank(),
panel.grid.major      = element_line(size = 0.5,  linetype = 'solid', colour = "grey"),
panel.grid.minor      = element_line(size = 0.25, linetype = 'solid', colour = "grey"),
axis.ticks            = element_line(color = "grey", size = 1),
axis.text             = element_text(color  = "white"),
axis.line             = element_line(colour = "grey",  size = 1),
axis.title            = element_text(color  = "white", face = "bold", size = 18), # adding a black line for x and y axis
strip.background = element_rect(fill="#2dc6d6"),
strip.text = element_text(colour = "white", face = "bold")
)
ggsave(g1, filename = "static/img/courses/dat_sci/08/price_facet.png",  bg = "transparent", width = 10, height = 12.5)
g1 <- bike_features_tbl %>%
mutate(category_2 = as.factor(category_2) %>%
fct_reorder(price_euro)) %>%
ggplot(aes(category_2, price_euro)) +
geom_violin(alpha = 0.9) +
geom_jitter(width = 0.1, alpha = 0.5, color = "#2dc6d6") +
coord_flip() +
facet_wrap(~ frame_material) +
scale_y_continuous(labels = scales::dollar_format(suffix = " €", prefix = "")) +
labs(
title = "Unit Price for Each Model",
y = "", x = "Category 2"
) +
theme(
line = element_line(color = "red"),
panel.background      = element_rect(fill = "transparent"), # bg of the panel
plot.background       = element_rect(fill = "transparent", color = NA), # bg of the plot
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white"),
plot.caption = element_text(color = "white"),
legend.background     = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent", color = "white"), # get rid of legend panel bg
legend.text           = element_text(color = "white") ,
legend.title          = element_text(color = "white") ,
legend.key = element_blank(),
panel.grid.major      = element_line(size = 0.5,  linetype = 'solid', colour = "grey"),
panel.grid.minor      = element_line(size = 0.25, linetype = 'solid', colour = "grey"),
axis.ticks            = element_line(color = "grey", size = 1),
axis.text             = element_text(color  = "white"),
axis.line             = element_line(colour = "grey",  size = 1),
axis.title            = element_text(color  = "white", face = "bold", size = 18), # adding a black line for x and y axis
strip.background = element_rect(fill="#2dc6d6"),
strip.text = element_text(colour = "white", face = "bold")
)
ggsave(g1, filename = "static/img/courses/dat_sci/08/price_facet.png",  bg = "transparent", width = 10, height = 12.5)
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 3,
data = predictions_new_cross_country_tbl)
g2
ggsave(g2, filename = "static/img/courses/dat_sci/08/new_bike_facet1.png",  bg = "transparent", width = 10, height = 12.5)
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 3,
color = "red",
data = predictions_new_cross_country_tbl)
g2
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 5,
color = "red",
data = predictions_new_cross_country_tbl)
g2
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 5,
color = "white",
data = predictions_new_cross_country_tbl)
g2
{{< figure src="/img/courses/dat_sci/08/new_bike_facet1.png">}}
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 5,
color = "white",
data = predictions_new_cross_country_tbl)
g2
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 4,
color = "white"
data = predictions_new_cross_country_tbl)
ggsave(g2, filename = "static/img/courses/dat_sci/08/new_bike_facet1.png",  bg = "transparent", width = 10, height = 12.5)
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 4,
color = "white",
data = predictions_new_cross_country_tbl)
g2 <- g1 +
geom_point(aes(y = .pred), color = "red", alpha = 0.5,
data = predictions_new_cross_country_tbl) +
ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
size = 4,
color = "white",
data = predictions_new_cross_country_tbl)
ggsave(g2, filename = "static/img/courses/dat_sci/08/new_bike_facet1.png",  bg = "transparent", width = 10, height = 12.5)
?metrics
bike_features_tbl
bfs <- readRDS("~/dat_sci_ss20/08/bike_features_tbl.rds")
bfs
glimpse(bfs)
bfs
rec <- recipes::recipe(price_euro ~ ., data = bfs)
rec
dummied <- rec %>% step_dummy(all_nominal())
library(recipes)
dummied <- rec %>% step_dummy(all_nominal())
dummied
glimpse(train_tbl)
recipes::recipe(price_euro ~ ., data = train_tbl) %>%
step_rm(id, model, category_1, category_3, year, gender, weight)
rec_obj <- recipe(price_euro ~ ., data = train_tbl) %>%
step_rm(id, model, category_1, category_3, year, gender, weight) %>%
prep()
recipe_obj <- recipe(price_euro ~ ., data = train_tbl) %>%
step_rm(id, model, category_1, category_3, year, gender, weight) %>%
prep()
bake(recipe_obj, train_tbl)
recipe_obj <- recipe(price_euro ~ ., data = train_tbl) %>%
step_rm(id, model, category_1, category_3, year, gender, weight) %>%
step_dummy(all_nominal(), one_hot = T) %>%
prep()
bake(recipe_obj, train_tbl)
bake(recipe_obj, train_tbl) %>% glimpse()
