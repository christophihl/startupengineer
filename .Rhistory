distinct()
plot_data <- world %>%
left_join(deaths, by = c(region = "location"))
plot_data %>% filter(region == "USA")
g <- plot_data %>% ggplot(aes(long, lat)) +
geom_map(aes(map_id = region, fill = `Mortality Rate`), map = world, color = "grey", size = 0.1) +
# theme(legend.position = "none") +
# scale_fill_gradient(low = "#EE4540", high = "#2D142C", labels = scales::percent) +
scale_fill_gradient(low = "#ee4540", high = "#2d142c", labels = scales::percent, na.value = "grey") +
labs(
title = "Confirmed COVID-19 deaths relative to the size of the population",
subtitle = "Around 3 Million confirmed COVID-19 deaths worldwide",
caption  = "Date: 04/16/2021",
color    = "Mortality Rate"
) +
tidyquant::theme_tq() +
theme(axis.title = element_blank(),
axis.text  = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
g
plot_data
deaths
covid_data_tbl
covid_data_tbl |> select(total_deaths)
covid_data_tbl |> select(location,total_deaths)
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths))
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> filter(total_deaths = max(total_deaths)) |> ungroup()
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> summarise(value = max(total_deaths))
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> summarise(value = max(total_deaths)) |> sum(value)
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> summarise(value = max(total_deaths)) |> summarise(death = sum(value))
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> summarise(value = max(total_deaths))
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> summarise(value = max(total_deaths)) |> filter(location == "United States")
covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> summarise(value = max(total_deaths))
test <- covid_data_tbl |> select(location,total_deaths) |> filter(!is.na(total_deaths)) |> group_by(location) |> summarise(value = max(total_deaths))
sum(test$value)
test |> arrange(value)
test |> arrange(-value)
covid_data_tbl
covid_data_tbl |> distinct(continent)
test <- covid_data_tbl |> select(continent,total_deaths) |> filter(!is.na(total_deaths), !is.na(continent)) |> group_by(continent) |> summarise(value = max(total_deaths))
test
covid_data_tbl |> select(continent,total_deaths) |> filter(!is.na(total_deaths), !is.na(continent)) |> group_by(continent) |> summarise(value = max(total_deaths)) |> summarise(death = sum(value))
sum(test$value)
test
covid_data_tbl
g <- plot_data %>% ggplot(aes(long, lat)) +
geom_map(aes(map_id = region, fill = `Mortality Rate`), map = world, color = "grey", size = 0.1) +
# theme(legend.position = "none") +
# scale_fill_gradient(low = "#EE4540", high = "#2D142C", labels = scales::percent) +
scale_fill_gradient(low = "#ee4540", high = "#2d142c", labels = scales::percent, na.value = "grey") +
labs(
title = "Confirmed COVID-19 deaths relative to the size of the population",
subtitle = "Around 6.2 Million confirmed COVID-19 deaths worldwide",
caption  = "Date: 04/16/2021",
color    = "Mortality Rate"
) +
tidyquant::theme_tq() +
theme(axis.title = element_blank(),
axis.text  = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
g14 <- g +     theme(
#     line = element_line(color = "red"),
#     rect = element_rect(color = "red"),
panel.background      = element_rect(fill = "transparent"), # bg of the panel
panel.border     = element_blank(),
plot.background       = element_rect(fill = "transparent", color = NA), # bg of the plot
plot.title = element_text(color = "white"),
plot.subtitle = element_text(color = "white"),
plot.caption = element_text(color = "white"),
legend.background = element_blank(),
legend.text           = element_text(color = "white") ,
legend.title = element_text(color = "white"),
legend.key = element_blank()
)
ggsave(g14, filename = "static/img/courses/dat_sci/05/challenge_2.png",  bg = "transparent", width = 10, height = 7.5)
plot_data
covid_data_tbl
covid_data_tbl |> filter(location == "Peru")
covid_data_tbl |> filter(location == "Peru") |> slice_max(total_deaths)
covid_data_tbl |> filter(location == "Peru") |> slice_max(total_deaths) |> select(location, total_deaths, population)
covid_data_tbl |> filter(location == "Peru") |> slice_max(total_deaths) |> select(location, total_deaths, total_cases,population)
covid_data_tbl |> filter(location == "Europe") |> slice_max(total_deaths) |> select(location, total_deaths, total_cases,population)
library(RSelenium)
# 1.  create driver -------------------------------------------------------
driver <- rsDriver(browser = "firefox", port = 4446L, check = F, verbose = F)
remDr <- driver$client
url <- "https://communicating.tuhh.de/"
remDr$navigate(url)
# Function to extract all members from a channel ----
get_members <- function() {
members <- c()
while (T) {
elem_member <- remDr$findElements(using = "css", value = "div.more-modal__name > button")
user_list   <- unlist( lapply(elem_member, function(x) {x$getElementText()}) )
members     <- append(members, user_list)
next_elem   <- suppressMessages(
try(
remDr$findElement(using = "id", value = "searchableUserListNextBtn"),
silent = T
)
)
if (inherits(next_elem, "try-error")) {
break
} else {
next_elem$clickElement()
}
}
return(members)
}
# Add one member to all channel ------------------------------------------------
sleep <- 0.5
names <- c("@ciu7072", "@cgi0395", "@cta1403", "@cbe0190")
kerberos <- names
# url <- "https://communicating.tuhh.de/w-11-students/channels/ws20-bdsc_chapter_0"
channel_urls <- c("https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_01_general",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_02_tidyverse",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_03_data_acquisition",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_04_data_wrangling",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_05_data_visualization")
i <- 1
remDr$navigate(channel_urls[i])
# url <- "https://communicating.tuhh.de/w-11-students/channels/ws20-bdsc_chapter_0"
channel_urls <- c("https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_01_general",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_02_tidyverse",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_03_data_acquisition",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_04_data_wrangling",
"https://communicating.tuhh.de/w-11-students/channels/ss22-bdsc_05_data_visualization")
channel_urls
channelHeader_elem <- remDr$findElement('id', 'channelHeaderDropdownIcon')
channelHeader_elem$clickElement()
channelAddMembers_elem <- remDr$findElement('id', 'channelAddMembers')
channelAddMembers_elem$clickElement()
selectItems_elem <- remDr$findElement('xpath', "//input[contains(@id,'react-select-')]")
selectItems_elem$sendKeysToElement(list(name))
j <- 1
# 4. Enter a value to search field
selectItems_elem <- remDr$findElement('xpath', "//input[contains(@id,'react-select-')]")
selectItems_elem$sendKeysToElement(list(kerberos[j]))
kerberos
for (i in seq_along(channel_urls)) {
# 1. Go to channel
remDr$navigate(channel_urls[i])
Sys.sleep(2) # Wait to load
# Loop through member
for (j in seq_along(kerberos)) {
Sys.sleep(2)
# 2. Open Drop Down
channelHeader_elem <- remDr$findElement('id', 'channelHeaderDropdownIcon')
channelHeader_elem$clickElement()
Sys.sleep(2)
# 3. Open Add New Members interface
channelAddMembers_elem <- remDr$findElement('id', 'channelAddMembers')
channelAddMembers_elem$clickElement()
Sys.sleep(sleep)
# 4. Enter a value to search field
selectItems_elem <- remDr$findElement('xpath', "//input[contains(@id,'react-select-')]")
selectItems_elem$sendKeysToElement(list(kerberos[j]))
print(kerberos[j])
Sys.sleep(sleep)
# 5. Get result
res_elem <- suppressMessages( try( remDr$findElement('class', 'primary-message'), silent = T ) )
# 5.1 result elem found?
if (inherits(res_elem, "try-error"))  {
# 6. Add member
result_elem <- remDr$findElement('css', '.more-modal__row.clickable')
result_elem$clickElement()
add_elem <- remDr$findElement('id', 'saveItems')
add_elem$clickElement()
} else {
res <- unlist( res_elem$getElementText() )
if (res %>% str_detect("No results found")) {
# Close and next
close_elem <- remDr$findElement('class', 'close')
close_elem$clickElement()
next;
} else {
stop()
}
}
Sys.sleep(2)
}
}
remDr$close()
driver$server$stop()
kerberos <- c("cap0503","ctf8680","cfr5150","cdu8345","cyc5236","cms4427","crp0075","cus7694","csm2997","cqw8839","cpr2750","cdz8503")
# 1.  create driver -------------------------------------------------------
driver <- rsDriver(browser = "firefox", port = 4446L, check = F, verbose = F)
remDr <- driver$client
url <- "https://communicating.tuhh.de/"
remDr$navigate(url)
kerberos <- c("cap0503","ctf8680","cfr5150","cdu8345","cyc5236","cms4427","crp0075","cus7694","csm2997","cqw8839","cpr2750","cdz8503")
for (i in seq_along(channel_urls)) {
# 1. Go to channel
remDr$navigate(channel_urls[i])
Sys.sleep(2) # Wait to load
# Loop through member
for (j in seq_along(kerberos)) {
Sys.sleep(2)
# 2. Open Drop Down
channelHeader_elem <- remDr$findElement('id', 'channelHeaderDropdownIcon')
channelHeader_elem$clickElement()
Sys.sleep(2)
# 3. Open Add New Members interface
channelAddMembers_elem <- remDr$findElement('id', 'channelAddMembers')
channelAddMembers_elem$clickElement()
Sys.sleep(sleep)
# 4. Enter a value to search field
selectItems_elem <- remDr$findElement('xpath', "//input[contains(@id,'react-select-')]")
selectItems_elem$sendKeysToElement(list(kerberos[j]))
print(kerberos[j])
Sys.sleep(sleep)
# 5. Get result
res_elem <- suppressMessages( try( remDr$findElement('class', 'primary-message'), silent = T ) )
# 5.1 result elem found?
if (inherits(res_elem, "try-error"))  {
# 6. Add member
result_elem <- remDr$findElement('css', '.more-modal__row.clickable')
result_elem$clickElement()
add_elem <- remDr$findElement('id', 'saveItems')
add_elem$clickElement()
} else {
res <- unlist( res_elem$getElementText() )
if (res %>% str_detect("No results found")) {
# Close and next
close_elem <- remDr$findElement('class', 'close')
close_elem$clickElement()
next;
} else {
stop()
}
}
Sys.sleep(2)
}
}
kerberos <- c("@coq3721", "@cih3236", "@cpa1233", "@cgi2118")
for (i in seq_along(channel_urls)) {
# 1. Go to channel
remDr$navigate(channel_urls[i])
Sys.sleep(2) # Wait to load
# Loop through member
for (j in seq_along(kerberos)) {
Sys.sleep(2)
# 2. Open Drop Down
channelHeader_elem <- remDr$findElement('id', 'channelHeaderDropdownIcon')
channelHeader_elem$clickElement()
Sys.sleep(2)
# 3. Open Add New Members interface
channelAddMembers_elem <- remDr$findElement('id', 'channelAddMembers')
channelAddMembers_elem$clickElement()
Sys.sleep(sleep)
# 4. Enter a value to search field
selectItems_elem <- remDr$findElement('xpath', "//input[contains(@id,'react-select-')]")
selectItems_elem$sendKeysToElement(list(kerberos[j]))
print(kerberos[j])
Sys.sleep(sleep)
# 5. Get result
res_elem <- suppressMessages( try( remDr$findElement('class', 'primary-message'), silent = T ) )
# 5.1 result elem found?
if (inherits(res_elem, "try-error"))  {
# 6. Add member
result_elem <- remDr$findElement('css', '.more-modal__row.clickable')
result_elem$clickElement()
add_elem <- remDr$findElement('id', 'saveItems')
add_elem$clickElement()
} else {
res <- unlist( res_elem$getElementText() )
if (res %>% str_detect("No results found")) {
# Close and next
close_elem <- remDr$findElement('class', 'close')
close_elem$clickElement()
next;
} else {
stop()
}
}
Sys.sleep(2)
}
}
kerberos <- c("@cdl3608")
remDr$open()
remDr$navigate(url)
kerberos <- c("@cdl3608")
for (i in seq_along(channel_urls)) {
# 1. Go to channel
remDr$navigate(channel_urls[i])
Sys.sleep(2) # Wait to load
# Loop through member
for (j in seq_along(kerberos)) {
Sys.sleep(2)
# 2. Open Drop Down
channelHeader_elem <- remDr$findElement('id', 'channelHeaderDropdownIcon')
channelHeader_elem$clickElement()
Sys.sleep(2)
# 3. Open Add New Members interface
channelAddMembers_elem <- remDr$findElement('id', 'channelAddMembers')
channelAddMembers_elem$clickElement()
Sys.sleep(sleep)
# 4. Enter a value to search field
selectItems_elem <- remDr$findElement('xpath', "//input[contains(@id,'react-select-')]")
selectItems_elem$sendKeysToElement(list(kerberos[j]))
print(kerberos[j])
Sys.sleep(sleep)
# 5. Get result
res_elem <- suppressMessages( try( remDr$findElement('class', 'primary-message'), silent = T ) )
# 5.1 result elem found?
if (inherits(res_elem, "try-error"))  {
# 6. Add member
result_elem <- remDr$findElement('css', '.more-modal__row.clickable')
result_elem$clickElement()
add_elem <- remDr$findElement('id', 'saveItems')
add_elem$clickElement()
} else {
res <- unlist( res_elem$getElementText() )
if (res %>% str_detect("No results found")) {
# Close and next
close_elem <- remDr$findElement('class', 'close')
close_elem$clickElement()
next;
} else {
stop()
}
}
Sys.sleep(2)
}
}
remDr$close()
driver$server$stop()
remDr$open()
data <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
library(tidyverse)
data <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
covid_data_tbl
data
data |> select(location, total_cases, new_cases)
data |> select(location, total_cases, new_cases) |> print(n=100)
data |> select(location, total_cases, new_cases) |> slice_min(new_cases)
data |> select(location, total_cases, new_cases) |> slice_min(total_cases)
library(tidyverse)
library(lubridate)
bike_orderlines_tbl <- read_rds(path = "~/Dropbox/05_teaching/02_data_science/01_class_material/01_Introduction/01_student_files/new/DS_101/02_data_wrangling/bike_orderlines.rds")
bike_orderlines_tbl <- read_rds(path = "~/Dropbox/05_teaching/02_data_science/01_class_material/01_Introduction/01_student_files/new/DS_101/02_data_wrangling/bike_orderlines.rds")
bike_orderlines_tbl <- read_rds("~/Dropbox/05_teaching/02_data_science/01_class_material/01_Introduction/01_student_files/new/DS_101/02_data_wrangling/bike_orderlines.rds")
bike_orderlines_tbl
sales_by_year_tbl <- bike_orderlines_tbl %>%
# Selecting columns to focus on and adding a year column
select(order_date, total_price) %>%
mutate(year = year(order_date)) %>%
# Grouping by year, and summarizing sales
group_by(year) %>%
summarize(sales = sum(total_price)) %>%
ungroup() %>%
# $ Format Text
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark    = ",",
prefix          = "",
suffix          = " €"))
sales_by_year_tbl
sales_by_year_tbl %>% ### <- has to be adjustes
# Canvas
ggplot(aes(x = year, y = sales, color = sales))
g <- sales_by_year_tbl %>%
# Canvas
ggplot(aes(x = year, y = sales, color = sales)) +
# Geometries
geom_line(size = 1) +
geom_point(size = 5) +
geom_smooth(method = "lm", se = FALSE, color = "#d62dc6") +
tidyquant::theme_tq() +
theme(legend.position = "right") +
scale_colour_continuous(low = "#95E1EA", high = "#2097A3")
bike_orderlines_wrangled_tbl
bike_orderlines_wrangled_tbl <- bike_orderlines_tbl
bike_orderlines_wrangled_tbl
bike_orderlines_wrangled_tbl <- bike_orderlines_wrangled_tbl %>%
# Separate product category name in main and sub
separate(col    = location,
into   = c("city", "state"),
sep    = ", ",
remove = T)
sales_by_loc_tbl <- bike_orderlines_wrangled_tbl %>%
# Selecting columns to focus on and adding a year column
select(state, total_price) %>%
# Grouping by year, and summarizing sales
group_by(state) %>%
summarize(sales = sum(total_price)) %>%
ungroup() %>%
# $ Format Text
# mutate(sales_text = scales::dollar(sales))
mutate(sales_text = scales::dollar(sales, big.mark = ".", decimal.mark = ",", prefix = "", suffix = " €"))
sales_by_loc_tbl
sales_by_loc_tbl %>%
# Setup canvas with year (x-axis) and revenue (y-axis)
ggplot(aes(x = state, y = sales)) +
# Geometries
geom_col(fill = "#2DC6D6") + # alternatively use Hex codes e.g. #2DC6D6
geom_label(aes(label = sales_text)) +
geom_smooth(method = "lm", se = FALSE, color = "#d62dc6") +
# Formatting
# scale_y_continuous(labels = scales::dollar) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".", decimal.mark = ",", prefix = "", suffix = " €")) +
labs(
title    = "Revenue by year",
subtitle = "Upward Trend",
x = "",
y = "Revenue"
) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
bike_orderlines_wrangled_tbl %>%
# Selecting columns and add a year
select(order_date, total_price, state) %>%
mutate(year = year(order_date)) %>%
# Groupby and Summarize year and category 2
group_by(year, state) %>%
summarise(sales = sum(total_price)) %>%
ungroup() %>%
# Format $ Text
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €"))
##  2. sales by location and year (facet_wrap)
# Step 1 - Manipulate
sales_by_year_loc_tbl <- bike_orderlines_wrangled_tbl %>%
# Selecting columns and add a year
select(order_date, total_price, state) %>%
mutate(year = year(order_date)) %>%
# Groupby and Summarize year and category 2
group_by(year, state) %>%
summarise(sales = sum(total_price)) %>%
ungroup() %>%
# Format $ Text
mutate(sales_text = scales::dollar(sales, big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €"))
# Step 2 - plot
sales_by_year_loc_tbl %>%
# Set up x, y, fill
ggplot(aes(x = year, y = sales, fill = state)) +
# Geometries
geom_col() +
facet_wrap(~ state) +
tidyquant::scale_fill_tq() +
geom_smooth(method = "lm", se = FALSE, color = "#d62dc6") +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title = "Revenue by year and category 2",
subtitle = "Each product category has an upward trend",
fill = "Product Secondary Category"
)
sales_by_loc_tbl %>%
# Setup canvas with year (x-axis) and revenue (y-axis)
ggplot(aes(x = state, y = sales)) +
# Geometries
geom_col(fill = "#2DC6D6") + # alternatively use Hex codes e.g. #2DC6D6
geom_label(aes(label = sales_text)) +
geom_smooth(method = "lm", se = FALSE, color = "#d62dc6") +
# Formatting
# scale_y_continuous(labels = scales::dollar) +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".", decimal.mark = ",", prefix = "", suffix = " €")) +
labs(
title    = "Revenue by year",
subtitle = "Upward Trend",
x = "",
y = "Revenue"
) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 2 - plot
sales_by_year_loc_tbl %>%
# Set up x, y, fill
ggplot(aes(x = year, y = sales, fill = state)) +
# Geometries
geom_col() +
facet_wrap(~ state) +
tidyquant::scale_fill_tq() +
geom_smooth(method = "lm", se = FALSE, color = "#d62dc6") +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title = "Revenue by year and category 2",
subtitle = "Each product category has an upward trend",
fill = "Product Secondary Category"
)
sales_by_year_loc_tbl %>%
# Set up x, y, fill
ggplot(aes(x = year, y = sales, fill = state)) +
# Geometries
geom_col() +
facet_wrap(~ state)
# Step 2 - plot
sales_by_year_loc_tbl %>%
# Set up x, y, fill
ggplot(aes(x = year, y = sales, fill = state)) +
# Geometries
geom_col() +
facet_wrap(~ state) +
tidyquant::scale_fill_tq() +
geom_smooth(method = "lm", se = FALSE, color = "#d62dc6") +
scale_y_continuous(labels = scales::dollar_format(big.mark = ".",
decimal.mark = ",",
prefix = "",
suffix = " €")) +
labs(
title = "Revenue by year and category 2",
subtitle = "Each product category has an upward trend",
fill = "Product Secondary Category"
)
