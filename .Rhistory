# 4.4 Wrap it into a function
get_bike_urls <- function(url) {
html_bike_category <- read_html(url)
# Get the URLs
bike_url_chr  <- html_bike_category %>%
html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href") |>
str_remove(pattern = "\\?.*")
}
bike_categories_chr
bike_urls_chr <- map_chr(bike_categories_chr, get_bike_urls)
bike_categories_chr
get_bike_urls
get_bike_urls(url = bike_categories_chr[1])
# 4.4 Wrap it into a function
get_bike_urls <- function(url) {
html_bike_category <- read_html(url)
# Get the URLs
bike_url_chr  <- html_bike_category %>%
html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href") |>
str_remove(pattern = "\\?.*")
return(bike_url_chr)
}
bike_urls_chr <- map_chr(bike_categories_chr, get_bike_urls)
bike_categories_chr
get_bike_urls(url = "https://www.canyon.com/en-de/road-bikes/endurance-bikes/")
get_bike_urls(url = bike_categories_chr[1])
get_bike_urls(url = bike_categories_chr[2])
bike_urls_chr <- map(bike_categories_chr, get_bike_urls)
bike_urls_chr
bike_categories_chr
# Web scrape the Urls for the (NOT families) categories (Roadbike-Endurance, Roadbike-Race, ...)
bike_categories_chr <- html_home |>
# Get the nodes for the categories ... (Inspect the file manually: [html_home |> xml2::write_html("/Users/jschwarz/Desktop/home.html")], because not everything will be the same like in the browser --> See Sublime Screenshot )
html_elements(css = ".header__navBarPreloadItem--level2") |>
# Extract the href attribute
html_attr('href') |>
# Remove the product families Sale, Outlet and Customer Service
str_subset(pattern = "sale|outlet|gear|customer-service", negate = T) |>
# Add the domain, because we will get only the subdirectories
str_c("https://www.canyon.com", ... = _) # new pipe good here? placeholder only works with a named argument. Thats why the dots...
bike_categories_chr
bike_categories_chr
bike_urls_chr <- map_chr(bike_categories_chr, get_bike_urls)
bike_urls_chr <- map(bike_categories_chr, get_bike_urls) |> flatten_chr()
bike_urls_chr
bike_urls_chr |> distinct()
bike_urls_chr |> unique()
# 4.4 Wrap it into a function
get_bike_urls <- function(url) {
html_bike_category <- read_html(url)
# Get the URLs
bike_url_chr  <- html_bike_category %>%
html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href") |>
str_remove(pattern = "\\?.*")
}
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(cat = ".", "en-de/", cat2 = ".*/", rest = ""))
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(cat = ".", "en-de/", cat2 = ".*/", rest = "."))
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(cat = ".", "en-de/", cat2 = ".*/", rest = ".*"))
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(cat = ".*", "en-de/", cat2 = ".*/", rest = ".*"))
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(cat = ".*", "en-de/", cat2 = ".*", rest = "/.*"))
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(cat = ".*", "en-de/", cat2 = "[^/]*", rest = ".*"))
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*", "en-de/", category = "[^/]*", ".*"))
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*", "en-de/", category = "[^/]*", ".*"), cols_remove = F)
bike_data_tbl
bike_data_rb_tbl <- bike_data_tbl |>
filter(category == "road-bike")
bike_data_rb_tbl
bike_data_rb_tbl <- bike_data_tbl |>
filter(category == "road-bikes")
bike_data_rb_tbl
bike_urls_chr
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category = ".*", "/" ".*"), cols_remove = F)
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category = ".*", "/", ".*"), cols_remove = F)
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category = "[a-z-]", "/", ".*"), cols_remove = F)
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category = "[a-z-]*", "/", ".*"), cols_remove = F)
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category = "[a-z-]*", "/", cate = "[a-z-]*",  ".*"), cols_remove = F)
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category_1 = "[a-z-]*", "/",
category_2 = "[a-z-]*", "/",
category_3 = "[a-z-]*", "/",
".*"), cols_remove = F)
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category_1 = "[a-z-]*", "/",
category_2 = "[a-z-]*", "/",
# category_3 = "[a-z-]*", "/",
".*"), cols_remove = F)
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category_1 = "[a-z-]*", "/",
category_2 = "[a-z-]*", "/",
category_3 = "[a-z-]*", "/",
".*"), cols_remove = F)
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category_1 = "[a-z-]*", "/",
category_2 = "[a-z-]*", "/",
category_3 = "[a-z-]*", "/",
".*"), cols_remove = F, too_few = "debug")
bike_data_tbl
bike_data_tbl |> filter(url_ok == F)
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category_1 = "[^/]*", "/",
category_2 = "[^/]*", "/",
category_3 = "[^/]*", "/",
".*"), cols_remove = F, too_few = "debug")
bike_data_tbl
bike_data_tbl |> filter(url_ok == F)
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category_1 = "[^/]*", "/",
category_2 = "[^/]*", "/",
category_3 = "[^/]*", "/",
".*"), cols_remove = F)
bike_data_tbl
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", category_1 = "[^/]*", "/",
category_2 = "[^/]*", "/",
category_3 = "[^/]*", "/",
category_4 = "[^/]*", "/",
".*"), cols_remove = F)
bike_data_tbl
View(bike_data_tbl)
# Get the price for each bike (wouldn't do it for all). Just demonstrating
# Split data to filter categories
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", family   = "[^/]*", "/",
category = "[^/]*", "/",
model    = "[^/]*", "/",
material = "[^/]*", "/",
".*"), cols_remove = F)
bike_data_tbl
bike_data_rb_tbl <- bike_data_tbl |>
filter(model == "endurace")
bike_data_rb_tbl
bike_data_endurace_tbl <- bike_data_tbl |>
filter(model == "endurace")
bike_data_endurace_tbl[1]
bike_data_endurace_tbl
html_bike_model <- read_html(bike_data_endurace_tbl$url[1])
html_bike_model |> html_element(css = ".productDescription__priceSale")
html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text()
html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text() |>
parse_number()
html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text() |>
parse_number() |>
str_remove("\\.")
bike_url_chr
bike_url_chr
bike_categories_chr
html_home |>
# Get the nodes for the categories ... (Inspect the file manually: [html_home |> xml2::write_html("/Users/jschwarz/Desktop/home.html")], because not everything will be the same like in the browser --> See Sublime Screenshot )
html_elements(css = ".footerLinksList__listItemTitle") |>
html_home |>
# Get the nodes for the categories ... (Inspect the file manually: [html_home |> xml2::write_html("/Users/jschwarz/Desktop/home.html")], because not everything will be the same like in the browser --> See Sublime Screenshot )
html_elements(css = ".footerLinksList__listItemTitle")
html_home |>
html_elements(css = ".footerLinksList__listItemTitle")
html_home |>
html_elements(css = ".footerLinksList__listItemTitle ..footerLinksListItem__link")
html_home |>
html_elements(css = ".footerLinksList__listItemTitle .footerLinksListItem__link")
html_home |>
html_elements(css = ".is-accordionItemOpen:nth-child(5) .footerLinksListItem__link")
html_home |>
html_elements(css = ".is-accordionItemOpen:nth-child(5) .footerLinksListItem__link")
html_elements(css = .footerLinksListItem__link")
html_elements(css = .footerLinksListItem__link")
html_home |>
html_elements(css = ".footerLinksListItem__link")
html_home |>
html_elements(css = ".footerLinksListItem__link")
html_home |>
html_elements(css = ".footerLinksListItem__link") |>
str_subset("road")
test <- html_home |>
html_elements(css = ".footerLinksListItem__link")
test[20]
test[20:100
test[20:100
test[20:100]
test[100]
test[50]
test[30]
test[20]
test[25]
test[26]
test[27]
test[28]
test[35]
test
length(test)
test <- html_home |>
html_elements(css = ".is-accordionItemOpen")
test
test <- html_home |>
html_elements(css = ".js-accordionItem")
test
html_elements(css = ".is-accordionItem:nth-child(5) .footerLinksListItem__link)
html_home |>
html_elements(css = ".is-accordionItem:nth-child(5) .footerLinksListItem__link")
html_home |>
html_elements(css = ".is-accordionItem:nth-child(5)")
html_home |>
html_elements(css = ".is-accordionItem")
# 1.0 LIBRARIES ----
library(tidyverse) # Main Package - Loads dplyr, purrr
library(rvest)     # HTML Hacking & Web Scraping
# 3.0 COLLECT PRODUCT CATEGORIES (Urls) ----
url_home        <- "https://www.canyon.com/en-de"
# Read in the HTML for the entire webpage
html_home       <- read_html(url_home)
library(xopen)     # Quickly opening URLs
# Read in the HTML for the entire webpage
html_home       <- read_html(url_home)
bike_categories_chr <- html_home |>
# Get the nodes for the categories ... (Inspect the file manually: [html_home |> xml2::write_html("/Users/jschwarz/Desktop/home.html")], because not everything will be the same like in the browser --> See Sublime Screenshot )
html_elements(css = ".is-accordionItemOpen:nth-child(5) :nth-child(5) .footerLinksListItem__link , .is-accordionItemOpen:nth-child(5) :nth-child(4) .footerLinksListItem__link, .is-accordionItemOpen:nth-child(5) :nth-child(3) .footerLinksListItem__link, .is-accordionItemOpen:nth-child(5) .footerLinksListItem__list:nth-child(2) .footerLinksListItem__link, .is-accordionItemOpen:nth-child(5) .footerLinksListItem__list:nth-child(1) .footerLinksListItem__link")
bike_categories_chr
bike_categories_chr <- html_home |>
# Get the nodes for the categories ... (Inspect the file manually: [html_home |> xml2::write_html("/Users/jschwarz/Desktop/home.html")], because not everything will be the same like in the browser --> See Sublime Screenshot )
html_elements(css = ".header__navBarPreloadItem--level2") |>
# Extract the href attribute
html_attr('href') |>
# Remove the product families Sale, Outlet and Customer Service
str_subset(pattern = "sale|outlet|gear|customer-service", negate = T) |>
# Add the domain, because we will get only the subdirectories
str_c("https://www.canyon.com", ... = _)
bike_categories_chr
bike_category_url <- bike_categories_chr[1]
bike_category_url
html_bike_category %>%
# Get the 'a' nodes, which are hierarchally 2 levels underneath
# the class productTileDefault--bike
html_elements("#section-product-grid .link")
# Get the URLs for the bikes of the first category
html_bike_category  <- read_html(bike_category_url)
html_bike_category %>%
# Get the 'a' nodes, which are hierarchally 2 levels underneath
# the class productTileDefault--bike
html_elements("#section-product-grid .link")
html_bike_category %>%
# Get the 'a' nodes, which are hierarchally 2 levels underneath
# the class productTileDefault--bike
html_elements(".productTileDefault__productName")
html_bike_category %>%
# Get the 'a' nodes, which are hierarchally 2 levels underneath
# the class productTileDefault--bike
html_elements(".productTileDefault__productName")
# html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href")
html_bike_category %>%
# Get the 'a' nodes, which are hierarchally 2 levels underneath
# the class productTileDefault--bike
html_elements(".productTileDefault__productName") |>
# html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href")
bike_url_chr
html_bike_category |>
# Get the 'a' nodes that containt the title and the link
html_elements(".productTileDefault__productName") |>
# html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href")
html_bike_category |>
# Get the 'a' nodes that containt the title and the link
html_elements(".productTileDefault__productName") |>
# html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href") |>
# Remove the query parameters of the URL (everything after the '?')
str_remove(pattern = "\\?.*")
bike_url_chr        <- html_bike_category |>
# Get the 'a' nodes that containt the title and the link
html_elements(".productTileDefault__productName") |>
# html_elements(css = ".productTileDefault--bike > div > a") |>
html_attr("href") |>
# Remove the query parameters of the URL (everything after the '?')
str_remove(pattern = "\\?.*")
# 4.2 Wrap it into a function
get_bike_urls <- function(url) {
html_bike_category <- read_html(url)
# Get the URLs
bike_url_chr  <- html_bike_category |>
html_elements(css = ".productTileDefault__productName") |>
html_attr("href") |>
str_remove(pattern = "\\?.*")
}
# 4.3 Run the function with the first url to check if it is working
get_bike_urls(url = bike_categories_chr[1])
# 4.2 Wrap it into a function
get_bike_urls <- function(url) {
html_bike_category <- read_html(url)
# Get the URLs
bike_url_chr  <- html_bike_category |>
html_elements(css = ".productTileDefault__productName") |>
html_attr("href") |>
str_remove(pattern = "\\?.*")
return(bike_url_chr)
}
# 4.3 Run the function with the first url to check if it is working
get_bike_urls(url = bike_categories_chr[1])
# Map the function against all urls
bike_urls_chr <- map(bike_categories_chr, get_bike_urls) |>
flatten_chr() |>
unique()
bike_urls_chr
bike_urls_chr
bike_data_tbl <- bike_urls_chr |>
tibble::as_tibble_col(column_name = "url") |>
tidyr::separate_wider_regex(cols = url, patterns = c(".*en-de/", family   = "[^/]*", "/",
category = "[^/]*", "/",
model    = "[^/]*", "/",
material = "[^/]*", "/",
".*"), cols_remove = F)
bike_data_endurace_tbl <- bike_data_tbl |>
filter(model == "endurace")
bike_data_endurace_tbl
# 5.1.2 Filter
bike_data_endurace_tbl <- bike_data_tbl |>
filter(model == "endurace") |>
slice(1:5)
# 5.1.2 Filter
bike_data_endurace_tbl <- bike_data_tbl |>
filter(model == "endurace")
bike_data_endurace_tbl |> slice(1:5)
html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text() |>
parse_number() |>
str_remove("\\.")
# 5.2 Get Prices
# For 1 bike
html_bike_model <- read_html(bike_data_endurace_tbl$url[1])
bike_price <- html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text() |>
parse_number() |>
str_remove("\\.")
bike_price
html_bike_model |>
html_element(css = ".productDescription__priceSale")
html_bike_model |>
html_elements(css = ".xlt-pdpName")
bike_model <- html_bike_model |>
html_elements(css = ".xlt-pdpName") |>
html_text()
bike_model
bike_model <- html_bike_model |>
html_elements(css = ".xlt-pdpName") |>
html_text() |>
str_squish()
bike_model
get_model_data <- function(url) {
read_html(url)
bike_price <- html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text() |>
parse_number() |>
str_remove("\\.")
bike_model <- html_bike_model |>
html_elements(css = ".xlt-pdpName") |>
html_text() |>
str_squish() # Clean
bike_data <- tibble(model = bike_model,
price = bike_price)
return(bike_data)
}
get_model_data(url = bike_data_endurace_tbl$url[1])
get_model_data <- function(url) {
read_html(url)
bike_price <- html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text() |>
parse_number() |>
str_remove("\\.")
bike_model <- html_bike_model |>
html_elements(css = ".xlt-pdpName") |>
html_text() |>
str_squish() # Clean
bike_data <- tibble(url   = url,
model = bike_model,
price = bike_price)
return(bike_data)
}
get_model_data(url = bike_data_endurace_tbl$url[1])
bike_data_endurace_tbl
test <- get_model_data(url = bike_data_endurace_tbl$url[1])
bike_data_endurace_tbl |> left_join(test)
bike_data_endurace_tbl$url[1])
bike_data_endurace_tbl$url[1]
test
bike_data_endurace_tbl |> left_join(test, by = "url")
bike_data_endurace_tbl |> left_join(test, by = join_by("url"))
get_model_data <- function(url) {
html_bike_model <- read_html(url)
bike_price <- html_bike_model |>
html_element(css = ".productDescription__priceSale") |>
html_text() |>
parse_number() |>
str_remove("\\.")
bike_model <- html_bike_model |>
html_elements(css = ".xlt-pdpName") |>
html_text() |>
str_squish() # Clean
bike_data <- tibble(url   = url,
model = bike_model,
price = bike_price)
return(bike_data)
}
test <- get_model_data(url = bike_data_endurace_tbl$url[1])
test
test <- get_model_data(url = bike_data_endurace_tbl$url[2])
test
bike_data_endurace_tbl$url
bike_model_data_tbl <- bike_data_endurace_tbl$url |> map(get_model_data)
bike_model_data_tbl
bike_model_data_tbl <- bike_data_endurace_tbl$url |> map_dfr(get_model_data)
bike_model_data_tbl <- bike_data_endurace_tbl$url[1:3] |> map_dfr(get_model_data)
bike_model_data_tbl <- bike_data_endurace_tbl$url[1] |> map_dfr(get_model_data)
bike_model_data_tbl <- bike_data_endurace_tbl$url[1] |> map_dfr(get_model_data)
bike_model_data_tbl
bike_model_data_tbl <- bike_data_endurace_tbl$url[1:2] |> map_dfr(get_model_data)
bike_model_data_tbl
bike_model_data_tbl <- bike_data_endurace_tbl$url[1:2] |> map_dfr(get_model_data)
bike_model_data_tbl
bike_model_data_tbl <- bike_data_endurace_tbl$url |> map_dfr(get_model_data)
